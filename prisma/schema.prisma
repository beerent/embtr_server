datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                     Int                     @id @default(autoincrement())
  uid                    String                  @unique @db.VarChar(255)
  email                  String                  @db.VarChar(255)
  username               String?                 @db.VarChar(255)
  displayName            String?                 @db.VarChar(255)
  location               String?                 @db.VarChar(255)
  bio                    String?                 @db.VarChar(255)
  photoUrl               String?                 @db.VarChar(255)
  bannerUrl              String?                 @db.VarChar(255)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  user                   UserPost[]
  plannedDays            PlannedDay[]
  recievedNotifications  Notification[]          @relation("fromUser")
  sendNotifications      Notification[]          @relation("toUser")
  pushNotificationTokens PushNotificationToken[]
  comments               Comment[]
  Like                   Like[]

  @@map("user")
}

model PushNotificationToken {
  id        Int      @id @default(autoincrement())
  userId    Int      @db.Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @db.VarChar(255)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, token], name: "unique_user_token")
  @@map("user_push_notification")
}

model Task {
  id           Int           @id @default(autoincrement())
  title        String        @unique @db.VarChar(255)
  description  String?       @db.VarChar(255)
  createdById  Int?          @db.Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  plannedTasks PlannedTask[]

  @@map("task")
}

model PlannedDay {
  id                Int                @id @default(autoincrement())
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int                @db.Int
  dayKey            String             @db.VarChar(10)
  date              DateTime           @db.Date
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  plannedTasks      PlannedTask[]
  plannedDayResults PlannedDayResult[]

  @@unique([userId, dayKey], name: "unique_user_daykey")
  @@map("planned_day")
}

model PlannedTask {
  id           Int        @id @default(autoincrement())
  plannedDayId Int        @db.Int
  plannedDay   PlannedDay @relation(fields: [plannedDayId], references: [id], onDelete: Cascade)
  taskId       Int        @db.Int
  task         Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  status       String     @db.VarChar(225)
  active       Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([plannedDayId], name: "planned_day_id")
  @@index([taskId], name: "task_id")
  @@map("planned_task")
}

model UserPost {
  id        Int       @id @default(autoincrement())
  title     String?   @db.VarChar(255)
  body      String?   @db.VarChar(255)
  userId    Int       @db.Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  active    Boolean   @default(true)
  images    Image[]
  likes     Like[]
  comments  Comment[]

  @@index([userId])
  @@map("user_post")
}

model PlannedDayResult {
  id           Int        @id @default(autoincrement())
  plannedDayId Int        @db.Int
  plannedDay   PlannedDay @relation(fields: [plannedDayId], references: [id], onDelete: Cascade)
  active       Boolean    @default(true)
  description  String?    @db.VarChar(255)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  images       Image[]
  likes        Like[]
  comments     Comment[]

  @@unique([plannedDayId], name: "planned_day_id")
  @@map("planned_day_result")
}

model Comment {
  id                       Int                @id @default(autoincrement())
  userId                   Int                @db.Int
  user                     User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment                  String             @db.VarChar(255)
  active                   Boolean            @default(true)
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  plannedDayResultComments PlannedDayResult[]
  userPosts                UserPost[]

  @@index([userId])
  @@map("comment")
}

model Like {
  id                Int                @id @default(autoincrement())
  userId            Int                @db.Int
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  active            Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  plannedDayResults PlannedDayResult[]
  userPosts         UserPost[]

  @@index([userId])
  @@map("like")
}

model Image {
  id                Int                @id @default(autoincrement())
  url               String             @db.VarChar(255)
  active            Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  plannedDayResults PlannedDayResult[]
  userPosts         UserPost[]

  @@map("image")
}

enum NotificationTargetPage {
  INVALID
  GOAL_DETAILS
  USER_PROFILE
  CHALLENGE_DETAILS
  USER_POST_DETAILS
  PLANNED_DAY_RESULT
  TODAY
}

model Notification {
  id         Int                    @id @default(autoincrement())
  fromUserId Int                    @db.Int
  fromUser   User                   @relation("fromUser", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUserId   Int                    @db.Int
  toUser     User                   @relation("toUser", fields: [toUserId], references: [id], onDelete: Cascade)
  read       Boolean                @default(false)
  summary    String                 @db.VarChar(255)
  targetPage NotificationTargetPage
  targetId   Int                    @db.Int
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt

  @@index([fromUserId])
  @@index([toUserId])
  @@map("notification")
}
