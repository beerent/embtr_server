datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                     Int                     @id @default(autoincrement())
  uid                    String                  @unique @db.VarChar(255)
  email                  String                  @db.VarChar(255)
  username               String?                 @db.VarChar(255)
  displayName            String?                 @db.VarChar(255)
  location               String?                 @db.VarChar(255)
  bio                    String?                 @db.VarChar(255)
  photoUrl               String?                 @db.VarChar(255)
  bannerUrl              String?                 @db.VarChar(255)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @default(now()) @updatedAt
  user                   UserPost[]
  plannedDays            PlannedDay[]
  recievedNotifications  Notification[]          @relation("fromUser")
  sendNotifications      Notification[]          @relation("toUser")
  pushNotificationTokens PushNotificationToken[]
  comments               Comment[]
  likes                  Like[]
  widgets                Widget[]
  taskHabitPreference    TaskHabitPreference[]
  quoteOfTheDay          QuoteOfTheDay[]
  Challenge              Challenge[]
  ChallengeParticipant   ChallengeParticipant[]

  @@map("user")
}

model PushNotificationToken {
  id        Int      @id @default(autoincrement())
  userId    Int      @db.Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @db.VarChar(255)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, token], name: "unique_user_token")
  @@map("user_push_notification")
}

model Task {
  id                   Int                    @id @default(autoincrement())
  title                String                 @unique @db.VarChar(255)
  description          String?                @db.VarChar(255)
  createdById          Int?                   @db.Int
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now()) @updatedAt
  plannedTasks         PlannedTask[]
  taskHabitPreference  TaskHabitPreference[]
  ChallengeRequirement ChallengeRequirement[]

  @@map("task")
}

model PlannedDay {
  id                                    Int                                     @id @default(autoincrement())
  user                                  User                                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                                Int                                     @db.Int
  dayKey                                String                                  @db.VarChar(10)
  date                                  DateTime                                @db.Date
  createdAt                             DateTime                                @default(now())
  updatedAt                             DateTime                                @default(now()) @updatedAt
  plannedTasks                          PlannedTask[]
  plannedDayResults                     PlannedDayResult[]
  hiddenPlannedDayResultRecommendations HiddenPlannedDayResultRecommendations[]

  @@unique([userId, dayKey], name: "unique_user_daykey")
  @@map("planned_day")
}

model PlannedTask {
  id                Int        @id @default(autoincrement())
  plannedDayId      Int        @db.Int
  plannedDay        PlannedDay @relation(fields: [plannedDayId], references: [id], onDelete: Cascade)
  taskId            Int        @db.Int
  task              Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  habitId           Int?       @db.Int
  habit             Habit?     @relation(fields: [habitId], references: [id], onDelete: Cascade)
  unitId            Int?
  unit              Unit?      @relation(fields: [unitId], references: [id])
  quantity          Float?     @db.Double
  completedQuantity Float?     @db.Double
  status            String     @db.VarChar(225)
  active            Boolean    @default(true)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @default(now()) @updatedAt

  @@index([plannedDayId], name: "planned_day_id")
  @@index([taskId], name: "task_id")
  @@index([habitId], name: "habit_id")
  @@index([unitId], name: "unit_id")
  @@map("planned_task")
}

model Habit {
  id                   Int                    @id @default(autoincrement())
  title                String                 @unique @db.VarChar(255)
  description          String?                @db.VarChar(255)
  iconSource           String?                @db.VarChar(255)
  iconName             String?                @db.VarChar(255)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now()) @updatedAt
  plannedTasks         PlannedTask[]
  taskHabitPreference  TaskHabitPreference[]
  ChallengeRequirement ChallengeRequirement[]

  @@map("habit")
}

model TaskHabitPreference {
  id        Int      @id @default(autoincrement())
  userId    Int      @db.Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskId    Int      @db.Int
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  habitId   Int      @db.Int
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, taskId], name: "unique_user_task")
  @@index([userId])
  @@index([taskId])
  @@index([habitId])
  @@map("user_task_habit_preference")
}

model UserPost {
  id        Int       @id @default(autoincrement())
  title     String?   @db.VarChar(255)
  body      String?   @db.VarChar(750)
  userId    Int       @db.Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  active    Boolean   @default(true)
  images    Image[]
  likes     Like[]
  comments  Comment[]

  @@index([userId])
  @@map("user_post")
}

model PlannedDayResult {
  id           Int        @id @default(autoincrement())
  plannedDayId Int        @db.Int
  plannedDay   PlannedDay @relation(fields: [plannedDayId], references: [id], onDelete: Cascade)
  active       Boolean    @default(true)
  description  String?    @db.VarChar(255)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  images       Image[]
  likes        Like[]
  comments     Comment[]

  @@unique([plannedDayId], name: "planned_day_id")
  @@map("planned_day_result")
}

model Comment {
  id                Int                @id @default(autoincrement())
  userId            Int                @db.Int
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment           String             @db.VarChar(255)
  active            Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt
  plannedDayResults PlannedDayResult[]
  userPosts         UserPost[]

  @@index([userId])
  @@map("comment")
}

model Like {
  id                Int                @id @default(autoincrement())
  userId            Int                @db.Int
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  active            Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt
  plannedDayResults PlannedDayResult[]
  userPosts         UserPost[]
  quoteOfTheDays    QuoteOfTheDay[]

  @@index([userId])
  @@map("like")
}

model Image {
  id                Int                @id @default(autoincrement())
  url               String             @db.VarChar(255)
  active            Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt
  plannedDayResults PlannedDayResult[]
  userPosts         UserPost[]

  @@map("image")
}

enum NotificationTargetPage {
  INVALID
  GOAL_DETAILS
  USER_PROFILE
  CHALLENGE_DETAILS
  USER_POST_DETAILS
  PLANNED_DAY_RESULT
  TODAY
}

model Notification {
  id         Int                    @id @default(autoincrement())
  fromUserId Int                    @db.Int
  fromUser   User                   @relation("fromUser", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUserId   Int                    @db.Int
  toUser     User                   @relation("toUser", fields: [toUserId], references: [id], onDelete: Cascade)
  read       Boolean                @default(false)
  summary    String                 @db.VarChar(255)
  targetPage NotificationTargetPage
  targetId   Int                    @db.Int
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @default(now()) @updatedAt

  @@index([fromUserId])
  @@index([toUserId])
  @@map("notification")
}

enum WidgetType {
  TIME_LEFT_IN_DAY
  QUOTE_OF_THE_DAY
  TODAYS_TASKS
  TODAYS_NOTES
  TODAYS_PHOTOS
  DAILY_HISTORY
  HABIT_JOURNEY
  PLANNING
}

model Widget {
  id        Int        @id @default(autoincrement())
  type      WidgetType
  order     Int        @db.Int
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int        @db.Int
  active    Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt

  @@unique([userId, type])
  @@map("widget")
}

model QuoteOfTheDay {
  id        Int      @id @default(autoincrement())
  quote     String   @db.VarChar(255)
  author    String?  @db.VarChar(255)
  userId    Int      @db.Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  active    Boolean  @default(true)
  likes     Like[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
  @@map("quote_of_the_day")
}

model Metadata {
  id        Int      @id @default(autoincrement())
  key       String   @unique @db.VarChar(255)
  value     String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("metadata")
}

model HiddenPlannedDayResultRecommendations {
  id           Int        @id @default(autoincrement())
  plannedDayId Int        @db.Int
  plannedDay   PlannedDay @relation(fields: [plannedDayId], references: [id], onDelete: Cascade)
  active       Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt

  @@index([plannedDayId])
  @@map("hidden_planned_day_result_recommendations")
}

// enum table that holds dates
model Season {
  id        Int      @id @default(autoincrement())
  date      DateTime @db.Date
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("season")
}

model Challenge {
  id                    Int                    @id @default(autoincrement())
  name                  String                 @db.VarChar(255)
  description           String?                @db.VarChar(255)
  creator               User                   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId             Int                    @db.Int
  challengeRequirements ChallengeRequirement[]
  start                 DateTime               @db.Date
  end                   DateTime               @db.Date
  active                Boolean                @default(true)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @default(now()) @updatedAt
  ChallengeParticipant  ChallengeParticipant[]

  @@index([creatorId])
}

enum ChallengeRequirementType {
  INVALID
  TASK
  HABIT
}

enum ChallengeDurationDisplay {
  INVALID
  DAY
  WEEK
  MONTH
}

model ChallengeRequirement {
  id                       Int                      @id @default(autoincrement())
  Task                     Task?                    @relation(fields: [TaskId], references: [id], onDelete: Cascade)
  TaskId                   Int?                     @db.Int
  Habit                    Habit?                   @relation(fields: [HabitId], references: [id], onDelete: Cascade)
  HabitId                  Int?                     @db.Int
  ChallengeRequirementType ChallengeRequirementType @default(INVALID)
  quantity                 Int                      @db.Int
  unit                     Unit                     @relation(fields: [UnitId], references: [id], onDelete: Cascade)
  UnitId                   Int                      @db.Int
  durationDays             Int                      @db.Int
  durationDisplay          ChallengeDurationDisplay @default(INVALID)
  active                   Boolean                  @default(true)
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @default(now()) @updatedAt
  Challenge                Challenge?               @relation(fields: [challengeId], references: [id])
  challengeId              Int?                     @db.Int

  @@index([TaskId])
  @@index([HabitId])
  @@index([UnitId])
  @@index([challengeId])
}

model ChallengeParticipant {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int       @db.Int
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  challengeId Int       @db.Int
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  @@index([userId])
  @@index([challengeId])
  @@map("challenge_participant")
}

model Unit {
  id                   Int                    @id @default(autoincrement())
  unit                 String                 @db.VarChar(255)
  stepSize             Float                  @db.Double
  active               Boolean                @default(true)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now()) @updatedAt
  PlannedTask          PlannedTask[]
  ChallengeRequirement ChallengeRequirement[]

  @@map("unit")
}
