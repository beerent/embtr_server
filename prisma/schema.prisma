datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          Int          @id @default(autoincrement())
  uid         String       @unique @db.VarChar(255)
  email       String       @db.VarChar(255)
  username    String?      @db.VarChar(255)
  displayName String?      @db.VarChar(255)
  location    String?      @db.VarChar(255)
  bio         String?      @db.VarChar(255)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  PlannedDay  PlannedDay[]
  //plannedDayResultLikes PlannedDayResultLikes[]

  @@map("user")
}

model Task {
  id           Int           @id @default(autoincrement())
  title        String        @unique @db.VarChar(255)
  description  String?       @db.VarChar(255)
  createdById  Int?          @db.Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  plannedTasks PlannedTask[]

  @@map("task")
}

model PlannedDay {
  id               Int                @id @default(autoincrement())
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int                @db.Int
  dayKey           String             @db.VarChar(10)
  date             DateTime           @db.Date
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  plannedTasks     PlannedTask[]
  plannedDayResult PlannedDayResult[]

  @@unique([userId, dayKey], name: "unique_user_daykey")
  @@map("planned_day")
}

model PlannedTask {
  id           Int        @id @default(autoincrement())
  plannedDayId Int        @db.Int
  plannedDay   PlannedDay @relation(fields: [plannedDayId], references: [id], onDelete: Cascade)
  taskId       Int        @db.Int
  task         Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  status       String     @db.VarChar(225)
  active       Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([plannedDayId], name: "planned_day_id")
  @@index([taskId], name: "task_id")
  @@map("planned_task")
}

model PlannedDayResult {
  id           Int        @id @default(autoincrement())
  plannedDayId Int        @db.Int
  plannedDay   PlannedDay @relation(fields: [plannedDayId], references: [id], onDelete: Cascade)
  active       Boolean    @default(true)
  //comments
  //likes
  //photos
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  //plannedDayResultLikes PlannedDayResultLikes[]

  @@unique([plannedDayId], name: "planned_day_id")
  @@map("day_result")
}

//model PlannedDayResultLikes {
//  id          Int       @id @default(autoincrement())
//  dayResultId Int       @db.Int
//  dayResult   DayResult @relation(fields: [dayResultId], references: [id], onDelete: Cascade)
//  userId      Int       @db.Int
//  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//  createdAt   DateTime  @default(now())
//  updatedAt   DateTime  @updatedAt

//  @@index([userId])
//  @@index([dayResultId])
//  @@unique([dayResultId, userId], name: "day_result_id_user_id")
//  @@map("day_result_likes")
//}
