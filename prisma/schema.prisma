datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// If this comment is removed the program will blow up! - tyka____ - 2024-07-13

generator client {
    provider = "prisma-client-js"
}

model User {
    id                       Int                       @id @default(autoincrement())
    uid                      String                    @unique @db.VarChar(255)
    email                    String                    @unique @db.VarChar(255)
    username                 String?                   @unique @db.VarChar(255)
    displayName              String?                   @db.VarChar(255)
    location                 String?                   @db.VarChar(255)
    bio                      String?                   @db.VarChar(255)
    photoUrl                 String?                   @db.VarChar(255)
    bannerUrl                String?                   @db.VarChar(255)
    accountSetup             Boolean                   @default(false)
    termsVersion             Int                       @default(0)
    createdAt                DateTime                  @default(now())
    updatedAt                DateTime                  @default(now()) @updatedAt
    user                     UserPost[]
    plannedDays              PlannedDay[]
    receivedNotifications    Notification[]            @relation("fromUser")
    sendNotifications        Notification[]            @relation("toUser")
    pushNotificationTokens   PushNotificationToken[]
    comments                 Comment[]
    likes                    Like[]
    widgets                  Widget[]
    quoteOfTheDay            QuoteOfTheDay[]
    challenges               Challenge[]
    challengeParticipant     ChallengeParticipant[]
    userAwards               UserAward[]
    tasks                    Task[]
    scheduledHabits          ScheduledHabit[]
    blockingUsers            BlockedUser[]             @relation("blockingUser")
    blockedUsers             BlockedUser[]             @relation("blockedUser")
    roles                    Role[]
    properties               Property[]
    habitStreaks             HabitStreak[]
    userBadges               UserBadge[]
    pointLedgerRecords       PointLedgerRecord[]
    userFeaturedPosts        UserFeaturedPost[]
    pushNotificationReceipts PushNotificationReceipt[]

    @@index([username])
    @@map("user")
}

model Property {
    id        Int      @id @default(autoincrement())
    userId    Int      @db.Int
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    key       String   @db.VarChar(255)
    value     String   @db.VarChar(255)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@unique([userId, key])
    @@index([userId])
    @@index([key])
    @@map("property")
}

model PushNotificationToken {
    id                       Int                       @id @default(autoincrement())
    userId                   Int                       @db.Int
    user                     User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
    token                    String                    @db.VarChar(255)
    active                   Boolean                   @default(true)
    createdAt                DateTime                  @default(now())
    updatedAt                DateTime                  @default(now()) @updatedAt
    pushNotificationReceipts PushNotificationReceipt[]

    @@unique([userId, token], name: "unique_user_token")
    @@map("user_push_notification")
}

model Task {
    id                    Int                    @id @default(autoincrement())
    title                 String                 @db.VarChar(255)
    description           String?                @db.VarChar(255)
    iconId                Int?                   @db.Int
    icon                  Icon?                  @relation(fields: [iconId], references: [id])
    userId                Int?                   @db.Int
    user                  User?                  @relation(fields: [userId], references: [id], onDelete: Cascade)
    habitCategoryId       Int?                   @db.Int
    habitCategory         HabitCategory?         @relation(fields: [habitCategoryId], references: [id])
    type                  String                 @default("DEFAULT")
    active                Boolean                @default(true)
    createdAt             DateTime               @default(now())
    updatedAt             DateTime               @default(now()) @updatedAt
    challengeRequirements ChallengeRequirement[]
    scheduledHabits       ScheduledHabit[]
    habitStreaks          HabitStreak[]

    @@index([userId], name: "user_id")
    @@index([habitCategoryId], name: "habit_category_id")
    @@index([iconId], name: "icon_id")
    @@map("task")
}

model PlannedDay {
    id                            Int                            @id @default(autoincrement())
    user                          User                           @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId                        Int                            @db.Int
    dayKey                        String                         @db.VarChar(10)
    date                          DateTime                       @db.Date
    status                        String?                        @db.VarChar(225)
    createdAt                     DateTime                       @default(now())
    updatedAt                     DateTime                       @default(now()) @updatedAt
    plannedTasks                  PlannedTask[]
    plannedDayResults             PlannedDayResult[]
    challengeParticipant          ChallengeParticipant[]
    plannedDayChallengeMilestones PlannedDayChallengeMilestone[]

    @@unique([userId, dayKey], name: "unique_user_daykey")
    @@map("planned_day")
}

model PlannedTask {
    id                  Int             @id @default(autoincrement())
    plannedDayId        Int             @db.Int
    plannedDay          PlannedDay      @relation(fields: [plannedDayId], references: [id], onDelete: Cascade)
    scheduledHabitId    Int?            @db.Int
    scheduledHabit      ScheduledHabit? @relation(fields: [scheduledHabitId], references: [id])
    timeOfDayId         Int             @default(5) @db.Int
    timeOfDay           TimeOfDay       @relation("current_planned_tasks", fields: [timeOfDayId], references: [id])
    originalTimeOfDayId Int             @default(5) @db.Int
    originalTimeOfDay   TimeOfDay       @relation("original_planned_tasks", fields: [originalTimeOfDayId], references: [id])
    title               String?         @db.VarChar(255)
    description         String?         @db.VarChar(255)
    iconId              Int?            @db.Int
    icon                Icon?           @relation(fields: [iconId], references: [id])
    unitId              Int?            @db.Int
    unit                Unit?           @relation(fields: [unitId], references: [id])
    quantity            Float?          @db.Double
    completedQuantity   Float?          @db.Double
    status              String          @db.VarChar(225)
    active              Boolean         @default(true)
    createdAt           DateTime        @default(now())
    updatedAt           DateTime        @default(now()) @updatedAt

    @@unique([plannedDayId, scheduledHabitId, timeOfDayId], name: "unique_planned_day_task")
    @@unique([plannedDayId, scheduledHabitId, originalTimeOfDayId], name: "unique_planned_day_original_task")
    @@index([plannedDayId], name: "planned_day_id")
    @@index([scheduledHabitId], name: "scheduled_habit_id")
    @@index([unitId], name: "unit_id")
    @@index([timeOfDayId], name: "time_of_day_id")
    @@index([originalTimeOfDayId], name: "original_time_of_day_id")
    @@index([iconId], name: "icon_id")
    @@map("planned_task")
}

model UserPost {
    id        Int       @id @default(autoincrement())
    title     String?   @db.VarChar(255)
    body      String?   @db.VarChar(750)
    userId    Int       @db.Int
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now()) @updatedAt
    active    Boolean   @default(true)
    images    Image[]
    likes     Like[]
    comments  Comment[]

    @@index([userId])
    @@map("user_post")
}

model PlannedDayResult {
    id           Int        @id @default(autoincrement())
    plannedDayId Int        @db.Int
    plannedDay   PlannedDay @relation(fields: [plannedDayId], references: [id], onDelete: Cascade)
    active       Boolean    @default(true)
    title        String?    @db.VarChar(255)
    description  String?    @db.VarChar(750)
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @default(now()) @updatedAt
    images       Image[]
    likes        Like[]
    comments     Comment[]

    @@index([plannedDayId])
    @@map("planned_day_result")
}

model Milestone {
    id                    Int                    @id @default(autoincrement())
    key                   String                 @unique @db.VarChar(255)
    description           String?                @db.VarChar(255)
    localImage            String?                @db.VarChar(255)
    metric                Int                    @db.Int
    ordinal               Int                    @db.Int
    remoteImageUrl        String?                @db.VarChar(255)
    active                Boolean                @default(true)
    createdAt             DateTime               @default(now())
    updatedAt             DateTime               @default(now()) @updatedAt
    challengeRequirements ChallengeRequirement[]
    challengeMilestones   ChallengeMilestone[]

    @@map("milestone")
}

model ChallengeMilestone {
    id                            Int                            @id @default(autoincrement())
    challengeId                   Int                            @db.Int
    challenge                     Challenge                      @relation(fields: [challengeId], references: [id], onDelete: Cascade)
    milestoneId                   Int                            @db.Int
    milestone                     Milestone                      @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
    active                        Boolean                        @default(true)
    createdAt                     DateTime                       @default(now())
    updatedAt                     DateTime                       @default(now()) @updatedAt
    plannedDayChallengeMilestones PlannedDayChallengeMilestone[]

    @@index([challengeId])
    @@index([milestoneId])
    @@map("challenge_milestone")
}

model PlannedDayChallengeMilestone {
    id                     Int                  @id @default(autoincrement())
    challengeMilestoneId   Int                  @db.Int
    challengeMilestone     ChallengeMilestone   @relation(fields: [challengeMilestoneId], references: [id], onDelete: Cascade)
    challengeParticipantId Int                  @db.Int
    challengeParticipant   ChallengeParticipant @relation(fields: [challengeParticipantId], references: [id], onDelete: Cascade)
    plannedDayId           Int                  @db.Int
    plannedDay             PlannedDay           @relation(fields: [plannedDayId], references: [id], onDelete: Cascade)
    active                 Boolean              @default(true)
    createdAt              DateTime             @default(now())
    updatedAt              DateTime             @default(now()) @updatedAt

    @@unique([challengeMilestoneId, challengeParticipantId], name: "unique_challenge_milestone_participant")
    @@index([challengeMilestoneId])
    @@index([plannedDayId])
    @@index([challengeParticipantId])
    @@map("planned_day_challenge_milestone")
}

model Comment {
    id                Int                @id @default(autoincrement())
    userId            Int                @db.Int
    user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    comment           String             @db.VarChar(255)
    active            Boolean            @default(true)
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @default(now()) @updatedAt
    plannedDayResults PlannedDayResult[]
    userPosts         UserPost[]
    challenges        Challenge[]
    featuredPosts     FeaturedPost[]

    @@index([userId])
    @@map("comment")
}

model Like {
    id                Int                @id @default(autoincrement())
    userId            Int                @db.Int
    user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    active            Boolean            @default(true)
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @default(now()) @updatedAt
    plannedDayResults PlannedDayResult[]
    userPosts         UserPost[]
    quoteOfTheDays    QuoteOfTheDay[]
    challenges        Challenge[]
    featuredPosts     FeaturedPost[]

    @@index([userId])
    @@map("like")
}

model Image {
    id                Int                @id @default(autoincrement())
    url               String             @db.VarChar(255)
    active            Boolean            @default(true)
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @default(now()) @updatedAt
    plannedDayResults PlannedDayResult[]
    userPosts         UserPost[]
    challenges        Challenge[]
    featuredPosts     FeaturedPost[]

    @@map("image")
}

enum NotificationTargetPage {
    INVALID
    GOAL_DETAILS
    USER_PROFILE
    CHALLENGE_DETAILS
    USER_POST_DETAILS
    PLANNED_DAY_RESULT
    TODAY
}

model Notification {
    id         Int                    @id @default(autoincrement())
    fromUserId Int                    @db.Int
    fromUser   User                   @relation("fromUser", fields: [fromUserId], references: [id], onDelete: Cascade)
    toUserId   Int                    @db.Int
    toUser     User                   @relation("toUser", fields: [toUserId], references: [id], onDelete: Cascade)
    read       Boolean                @default(false)
    summary    String                 @db.VarChar(255)
    targetPage NotificationTargetPage
    targetId   Int                    @db.Int
    createdAt  DateTime               @default(now())
    updatedAt  DateTime               @default(now()) @updatedAt

    @@index([fromUserId])
    @@index([toUserId])
    @@map("notification")
}

enum WidgetType {
    TIME_LEFT_IN_DAY
    QUOTE_OF_THE_DAY
    TODAYS_TASKS
    TODAYS_NOTES
    TODAYS_PHOTOS
    DAILY_HISTORY
    HABIT_JOURNEY
    PLANNING
    ACTIVE_CHALLENGES
}

model Widget {
    id        Int        @id @default(autoincrement())
    type      WidgetType
    order     Int        @db.Int
    user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    Int        @db.Int
    active    Boolean    @default(true)
    createdAt DateTime   @default(now())
    updatedAt DateTime   @default(now()) @updatedAt

    @@unique([userId, type])
    @@map("widget")
}

model QuoteOfTheDay {
    id        Int      @id @default(autoincrement())
    quote     String   @db.VarChar(255)
    author    String?  @db.VarChar(255)
    userId    Int      @db.Int
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    active    Boolean  @default(true)
    likes     Like[]
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@index([userId])
    @@map("quote_of_the_day")
}

model Metadata {
    id        Int      @id @default(autoincrement())
    key       String   @unique @db.VarChar(255)
    value     String   @db.VarChar(255)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("metadata")
}

model Season {
    id        Int      @id @default(autoincrement())
    date      DateTime @db.Date
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("season")
}

model Challenge {
    id                    Int                    @id @default(autoincrement())
    name                  String                 @db.VarChar(255)
    description           String?                @db.VarChar(255)
    creator               User                   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    creatorId             Int                    @db.Int
    challengeRequirements ChallengeRequirement[]
    awardId               Int?                   @db.Int
    award                 Award?                 @relation(fields: [awardId], references: [id])
    start                 DateTime               @db.Date
    end                   DateTime               @db.Date
    timelineTimestamp     DateTime               @default(now())
    tagId                 Int?                   @db.Int
    tag                   Tag?                   @relation(fields: [tagId], references: [id])
    active                Boolean                @default(true)
    images                Image[]
    likes                 Like[]
    comments              Comment[]
    createdAt             DateTime               @default(now())
    updatedAt             DateTime               @default(now()) @updatedAt
    challengeParticipants ChallengeParticipant[]
    challengeMilestones   ChallengeMilestone[]

    @@index([tagId])
    @@index([creatorId])
    @@index([awardId])
    @@map("challenge")
}

enum ChallengeCalculationType {
    INVALID
    TOTAL
    UNIQUE
}

model ChallengeRequirement {
    id Int @id @default(autoincrement())

    challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
    challengeId Int       @db.Int

    task   Task? @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId Int?  @db.Int
    unit   Unit? @relation(fields: [unitId], references: [id], onDelete: Cascade)
    unitId Int?  @db.Int

    calculationType ChallengeCalculationType @default(INVALID)

    calculationIntervalDays  Int? @db.Int
    requiredIntervalQuantity Int? @db.Int

    requiredTaskQuantity Int? @db.Int

    active     Boolean     @default(true)
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @default(now()) @updatedAt
    milestones Milestone[]

    @@index([taskId])
    @@index([unitId])
    @@index([challengeId])
    @@map("challenge_requirement")
}

model ChallengeParticipant {
    id                                  Int                                 @id @default(autoincrement())
    user                                User                                @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId                              Int                                 @db.Int
    challenge                           Challenge                           @relation(fields: [challengeId], references: [id], onDelete: Cascade)
    challengeId                         Int                                 @db.Int
    amountComplete                      Float                               @default(0) @db.Double
    challengeRequirementCompletionState ChallengeRequirementCompletionState @default(INVALID)
    completedOnPlannedDayId             Int?                                @db.Int
    completedOnPlannedDay               PlannedDay?                         @relation(fields: [completedOnPlannedDayId], references: [id], onDelete: Cascade)
    active                              Boolean                             @default(true)
    createdAt                           DateTime                            @default(now())
    updatedAt                           DateTime                            @default(now()) @updatedAt
    plannedDayChallengeMilestones       PlannedDayChallengeMilestone[]

    @@unique([userId, challengeId], name: "unique_challenge_participant")
    @@index([userId])
    @@index([challengeId])
    @@index([completedOnPlannedDayId])
    @@map("challenge_participant")
}

enum ChallengeRequirementCompletionState {
    INVALID
    IN_PROGRESS
    COMPLETED
}

model Award {
    id          Int         @id @default(autoincrement())
    name        String      @db.VarChar(255)
    description String?     @db.VarChar(255)
    iconId      Int?        @db.Int
    icon        Icon?       @relation(fields: [iconId], references: [id])
    active      Boolean     @default(true)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @default(now()) @updatedAt
    userAwards  UserAward[]
    challenges  Challenge[]

    @@index([iconId])
    @@map("award")
}

model UserAward {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    Int      @db.Int
    awardId   Int      @db.Int
    award     Award    @relation(fields: [awardId], references: [id], onDelete: Cascade)
    active    Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@unique([userId, awardId], name: "unique_user_award")
    @@index([userId])
    @@index([awardId])
    @@map("user_award")
}

model Unit {
    id                   Int                    @id @default(autoincrement())
    unit                 String                 @db.VarChar(255)
    abreveation          String                 @default("") @db.VarChar(5)
    stepSize             Float                  @db.Double
    active               Boolean                @default(true)
    createdAt            DateTime               @default(now())
    updatedAt            DateTime               @default(now()) @updatedAt
    PlannedTask          PlannedTask[]
    challengeRequirement ChallengeRequirement[]
    ScheduledHabit       ScheduledHabit[]

    @@map("unit")
}

model HabitCategory {
    id             Int      @id @default(autoincrement())
    name           String   @db.VarChar(255)
    description    String?  @db.VarChar(255)
    remoteImageUrl String?  @db.VarChar(255)
    localImage     String?  @db.VarChar(255)
    active         Boolean  @default(true)
    order          Int      @default(99) @db.Int
    generic        Boolean  @default(false)
    createdAt      DateTime @default(now())
    updatedAt      DateTime @default(now()) @updatedAt
    tasks          Task[]

    @@map("habit_category")
}

model DayOfWeek {
    id              Int              @id @default(autoincrement())
    day             String           @db.VarChar(10)
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @default(now()) @updatedAt
    scheduledHabits ScheduledHabit[]

    @@map("day_of_week")
}

model TimeOfDay {
    id                   Int              @id @default(autoincrement())
    period               String           @db.VarChar(255)
    createdAt            DateTime         @default(now())
    updatedAt            DateTime         @default(now()) @updatedAt
    scheduledHabits      ScheduledHabit[]
    plannedTasks         PlannedTask[]    @relation("current_planned_tasks")
    originalPlannedTasks PlannedTask[]    @relation("original_planned_tasks")

    @@map("time_of_day")
}

model ScheduledHabit {
    id                Int           @id @default(autoincrement())
    userId            Int           @db.Int
    user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    taskId            Int           @db.Int
    task              Task          @relation(fields: [taskId], references: [id], onDelete: Cascade)
    title             String?       @db.VarChar(255)
    description       String?       @db.VarChar(255)
    iconId            Int?          @db.Int
    icon              Icon?         @relation(fields: [iconId], references: [id])
    daysOfWeekEnabled Boolean       @default(true)
    daysOfWeek        DayOfWeek[]
    timesOfDayEnabled Boolean       @default(true)
    timesOfDay        TimeOfDay[]
    detailsEnabled    Boolean       @default(true)
    quantity          Float         @db.Double
    unitId            Int?          @db.Int
    unit              Unit?         @relation(fields: [unitId], references: [id])
    startDate         DateTime?     @db.Date
    endDate           DateTime?     @db.Date
    active            Boolean       @default(true)
    createdAt         DateTime      @default(now())
    updatedAt         DateTime      @default(now()) @updatedAt
    plannedTasks      PlannedTask[]

    @@index([taskId])
    @@index([unitId])
    @@index([userId])
    @@index([iconId])
    @@map("scheduled_habit")
}

model BlockedUser {
    id            Int      @id @default(autoincrement())
    userId        Int      @db.Int
    user          User     @relation("blockingUser", fields: [userId], references: [id], onDelete: Cascade)
    blockedUserId Int      @db.Int
    blockedUser   User     @relation("blockedUser", fields: [blockedUserId], references: [id], onDelete: Cascade)
    active        Boolean  @default(true)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @default(now()) @updatedAt

    @@unique([userId, blockedUserId], name: "unique_user_blocked_user")
    @@index([userId])
    @@index([blockedUserId])
    @@map("blocked_user")
}

model Feature {
    id          Int    @id @default(autoincrement())
    name        String @unique @db.VarChar(255)
    description String @db.VarChar(255)
    status      String @default("PENDING")

    active    Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    requesterRoles Role[] @relation("FeatureToRequesterRole")
    targetRoles    Role[] @relation("FeatureToTargetRole")

    @@map("feature")
}

model Role {
    id   Int    @id @default(autoincrement())
    name String @unique @db.VarChar(255)

    users             User[]
    requesterFeatures Feature[] @relation("FeatureToRequesterRole")
    targetFeatures    Feature[] @relation("FeatureToTargetRole")

    @@map("role")
}

model Icon {
    id               Int               @id @default(autoincrement())
    name             String            @db.VarChar(255)
    key              String            @db.VarChar(255)
    remoteImageUrl   String?           @db.VarChar(255)
    localImage       String?           @db.VarChar(255)
    active           Boolean           @default(true)
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @default(now()) @updatedAt
    tags             Tag[]
    categories       IconCategory[]
    plannedTasks     PlannedTask[]
    ScheduledHabit   ScheduledHabit[]
    Task             Task[]
    Award            Award[]
    badges           Badge[]
    habitStreakTiers HabitStreakTier[]

    @@unique([key])
    @@map("icon")
}

model Tag {
    id        Int         @id @default(autoincrement())
    name      String      @db.VarChar(255)
    category  String      @default("DEFAULT") @db.VarChar(255)
    color     String      @default("#000000") @db.VarChar(7)
    active    Boolean     @default(true)
    createdAt DateTime    @default(now())
    updatedAt DateTime    @default(now()) @updatedAt
    icons     Icon[]
    Challenge Challenge[]

    @@unique([name, category])
    @@map("tag")
}

model IconCategory {
    id        Int      @id @default(autoincrement())
    name      String   @db.VarChar(255)
    active    Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
    icons     Icon[]

    @@map("icon_category")
}

model HabitStreak {
    id     Int    @id @default(autoincrement())
    userId Int    @db.Int
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    taskId Int?   @db.Int
    task   Task?  @relation(fields: [taskId], references: [id], onDelete: Cascade)
    type   String @default("INVALID")
    streak Int    @default(0)

    @@unique([userId, taskId, type], name: "unique_user_task_type")
    @@index([userId])
    @@index([taskId])
    @@map("habit_streak")
}

model Badge {
    id               Int               @id @default(autoincrement())
    key              String            @db.VarChar(255)
    iconId           Int
    icon             Icon              @relation(fields: [iconId], references: [id], onDelete: Cascade)
    category         String            @db.VarChar(255)
    priority         Int               @default(0)
    active           Boolean           @default(true)
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @default(now())
    habitStreakTiers HabitStreakTier[]
    userBadges       UserBadge[]
    levels           Level[]

    @@unique([key])
    @@index([iconId])
    @@map("badge")
}

model UserBadge {
    id        Int      @id @default(autoincrement())
    userId    Int
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    badgeId   Int
    badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
    active    Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())

    @@unique([userId, badgeId], name: "unique_user_badge")
    @@index([badgeId])
    @@index([userId])
    @@map("user_badge")
}

model HabitStreakTier {
    id              Int      @id @default(autoincrement())
    badgeId         Int?
    badge           Badge?   @relation(fields: [badgeId], references: [id])
    iconId          Int?
    icon            Icon?    @relation(fields: [iconId], references: [id])
    minStreak       Int
    maxStreak       Int
    name            String   @db.VarChar(255)
    backgroundColor String   @db.VarChar(7)
    active          Boolean  @default(true)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @default(now())

    @@index([badgeId])
    @@index([iconId])
    @@map("habit_streak_tier")
}

model Level {
    id        Int      @id @default(autoincrement())
    name      String   @db.VarChar(255)
    minPoints Int      @db.Int
    maxPoints Int      @db.Int
    level     Int      @unique @db.Int
    badgeId   Int
    badge     Badge    @relation(fields: [badgeId], references: [id])
    active    Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@index([badgeId])
    @@map("level")
}

model PointDefinition {
    id        Int      @id @default(autoincrement())
    type      String   @db.VarChar(255)
    points    Int      @db.Int
    version   Int      @default(1) @db.Int
    active    Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@unique([type, version], name: "unique_type_version")
    @@map("point_definition")
}

model PointLedgerRecord {
    id                  Int      @id @default(autoincrement())
    userId              Int      @db.Int
    user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    relevantId          Int      @db.Int
    dayKey              String   @db.VarChar(10)
    pointDefinitionType String   @db.VarChar(255)
    points              Int      @db.Int
    active              Boolean  @default(true)
    createdAt           DateTime @default(now())
    updatedAt           DateTime @default(now()) @updatedAt

    @@unique([userId, relevantId, pointDefinitionType], name: "unique_user_relevant_type")
    @@index([userId])
    @@index([relevantId])
    @@index([dayKey])
    @@map("point_ledger_record")
}

model FeaturedPost {
    id Int @id @default(autoincrement())

    title             String?            @db.VarChar(255)
    subtitle          String?            @db.VarChar(255)
    body              String?            @db.VarChar(750)
    expirationDate    DateTime?          @db.Date
    active            Boolean            @default(true)
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @default(now()) @updatedAt
    images            Image[]
    likes             Like[]
    comments          Comment[]
    userFeaturedPosts UserFeaturedPost[]

    @@map("featured_post")
}

model UserFeaturedPost {
    id             Int          @id @default(autoincrement())
    userId         Int          @db.Int
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    featuredPostId Int          @db.Int
    featuredPost   FeaturedPost @relation(fields: [featuredPostId], references: [id], onDelete: Cascade)
    isViewed       Boolean      @default(false)
    active         Boolean      @default(true)
    sortDate       DateTime
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @default(now()) @updatedAt

    @@unique([userId, featuredPostId], name: "unique_user_featured_post")
    @@index([userId])
    @@index([featuredPostId])
    @@map("user_featured_post")
}

model PushNotificationReceipt {
    id                      Int                   @id @default(autoincrement())
    userId                  Int                   @db.Int
    user                    User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
    pushNotificationTokenId Int                   @db.Int
    pushNotificationToken   PushNotificationToken @relation(fields: [pushNotificationTokenId], references: [id], onDelete: Cascade)
    message                 String                @db.VarChar(255)
    status                  String                @default("PENDING") @db.VarChar(255)
    expoStatus              String                @db.VarChar(255)
    expoTicketId            String                @unique @db.VarChar(36)
    expoErrorMessage        String?               @db.VarChar(255)
    expoErrorDetail         String?               @db.VarChar(255)
    active                  Boolean               @default(true)
    createdAt               DateTime              @default(now())
    updatedAt               DateTime              @default(now()) @updatedAt

    @@index([userId])
    @@index([pushNotificationTokenId])
    @@index([status])
    @@index([expoTicketId])
    @@map("push_notification_receipt")
}
